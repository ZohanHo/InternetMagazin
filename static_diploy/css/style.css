html{
    height: 100%;
}

body{
    display: flex;
    display: -webkit-flex;
    flex-direction: column;
    -webkit-flex-direction: column;


	font-family: Tahoma, Arial, sans-serif;
	background-color: #D8D8D8;
}

div {
	box-sizing: border-box;
}


.two.block__element span {
	background: #e6e6dd;
	color: #366bd0;
	display: block;      /* Элемент показывается как блочный. Применение этого значения для встроенных элементов,
						 апример тега <span>, заставляет его вести подобно блокам — происходит перенос строк в
						 начале и в конце содержимого.	 */

	width: 280px;		 /* Ширина спена*/

	height: 332px;		 /* Высота спена*/

	line-height: 15px;    /*  межстрочный интервал */

	text-align: center;   /* текст в центре*/

	border-radius: 0;   /* круглый если 50% указать - края*/

	position: absolute;   /* Указывает, что элемент абсолютно позиционирован, при этом другие элементы отображаются
						   на веб-странице словно абсолютно позиционированного элемента и нет. Положение элемента
						   задается свойствами left, top, right и bottom, также на положение влияет значение свойства
						   position родительского элемента. Так, если у родителя значение position установлено как static
						   или родителя нет, то отсчет координат ведется от края окна браузера. Если у родителя значение
						   position задано как fixed, relative или absolute, то отсчет координат ведется
						   от края родительского элемента. */

	left: 4px; /* отступ спена в блоке слеа */

	margin-left: 0; /* Отступы от спена до родителя, тут до елемента блока */

	top: 1%; /* отступ спена в блоке сверху */

	margin-top: 0;


}

.one.block {
	background: #D8D8D8;

	width: 1110px;  	/* Ширина Флекс блока*/

	height: 1560px;  	/* Высота Флекс блока*/

	margin: 0 auto; /* первый - отступ сверху снизу от блока до родителя, второй по бокам до родителя */

	padding: 30px;  	/* отступ внутри блока от блока к его елементам по всем сторонам*/



}

.two.block__element {
	/*background: #CDFFE8;*/

	width: 30%;  		/* Ширина елемента в блоке*/

	height: 340px; 		/* высота елемента в блоке */

	position: relative; /* Положение элемента устанавливается относительно его исходного места */

	margin: 15px; 		/*  Устанавливает величину отступа от каждого края элемента.
						Отступом является пространство от границы текущего элемента
						до внутренней границы его родительского элемента*/

	text-align: center;



}



/*  Flexbox CSS Styling  */

.one.flex-container {  /* свойства контейнера*/


	display: flex;  				/*для того что бы flex заработал для родителя нужно прописать
									обязательно flex, все элементы выстраиваются в дну строку и
									не будут переносится, но можно это отключить свойством nowrap*/

	flex-flow: row wrap; 			/* flex-flow: row nowrap; - значение по умолчанию

									row - в строку на одной линии все flex-елементы, column - колонка
								     row-reverse , column-reverse - соответственно реверс.

								     wrap - перенос, размер согласно .block__element (width: 5%; height: 150px;)
								     nowrap - нету перноса все сжимается
								     wrap-reverse - соответственно */

	justify-content: space-between; 	/*  Выравнивание вдоль горизонтальной оси

										отображенеи елементов, допустим ихи мало:
									   space-around - растянуть на все строку равномерно
									   space-between - растянуть на все строку равномерно, но первый и
									   последний елемент прижат к краю, используется часто
									   flex-start - елементы со стврта согласно своего размера
									   flex-end - с конца согласно размера, если нудно сжимаются
									   center - по центру согласно размера */


	align-items: flex-start ;			/*  Выравнивание вдоль вертикальной оси

										stretch - Занимают все высоту родительского елемента
										(колонка снизу доверху), но нужно закоментировать /*height: 150px;
										flex-start - елементы со стврта согласно своего размера
										flex-end - с конца согласно размера, если нудно сжимаются
										center - по центру согласно размера
										baseline - не нужное
										*/

	align-content: flex-start;   		/* 	Выравнивание списка елементов вдоль вертикальной оси,
										нужно отключить nowrap, когда много елеменов, и хи нужно
										упорядочмть как строки.

										stretch - Занимают все высоту родительского елемента
										space-around - растянуть на все строку равномерно
									   	space-between - растянуть на все строку равномерно, но первый и
									   	последний елемент прижат к краю, используется часто
									   	flex-start - елементы со стврта согласно своего размера
									   	flex-end - с конца согласно размера, если нудно сжимаются
									   	center - по центру согласно размера */
}

.two.flex-element {  /* свойства елемента*/

	order: 0;               /* сортировка - с помощью цыфры елементу присваивается номер
					            <div class="block__element flex-element"  style="order: 1">*/

	flex-grow: 0;       /* растягтвание flex елемента, можно один или несколько сделать длинее
							 если 1 то он будет растянут на 50% по строке, все остальные на 50%
							 если 2, то по 25% = 50%, , все остальные на 50, и т.д.% */

	flex-shrink: 1;     /* сужение флех елементв, все узкие один широкий,
						   значения 1 или 0 */

	/*flex-basis: 100px; /* фиксированое растягивание определенного елемента, 240px
						  margin: 1px; , если указать для одного елемента то
						  в контейнере все тянется, а наш елемент фиксированый*/

	/* flex:; 1 0 auto    - можно записать значение преведущих трех елементов */

	align-self: auto;	/* свойства елемента*/
}


	/* Footer */

#myFooter {
    background-color: #3c3d41;
    color: white;
    padding-top: 30px;
}

#myFooter .footer-copyright {
    background-color: #333333;
    padding-top: 3px;
    padding-bottom: 3px;
    text-align: center;
}

#myFooter .row {
    margin-bottom: 60px;
}

#myFooter .navbar-brand {
    margin-top: 45px;
    height: 65px;
}

#myFooter .footer-copyright p {
    margin: 10px;
    color: #ccc;
}

#myFooter ul {
    list-style-type: none;
    padding-left: 0;
    line-height: 1.7;
}

#myFooter h5 {
    font-size: 18px;
    color: white;
    font-weight: bold;
    margin-top: 30px;
}

#myFooter h2 a{
    font-size: 50px;
    text-align: center;
    color: #fff;
}

#myFooter a {
    color: #d2d1d1;
    text-decoration: none;
}

#myFooter a:hover,
#myFooter a:focus {
    text-decoration: none;
    color: white;
}

#myFooter .social-networks {
    text-align: center;
    padding-top: 30px;
    padding-bottom: 16px;
}

#myFooter .social-networks a {
    font-size: 32px;
    color: #f9f9f9;
    padding: 10px;
    transition: 0.2s;
}

#myFooter .social-networks a:hover {
    text-decoration: none;
}

#myFooter .facebook:hover {
    color: #0077e2;
}

#myFooter .google:hover {
    color: #ef1a1a;
}

#myFooter .twitter:hover {
    color: #00aced;
}

#myFooter .btn {
    color: white;
    background-color: #d84b6b;
    border-radius: 20px;
    border: none;
    width: 150px;
    display: block;
    margin: 0 auto;
    margin-top: 10px;
    line-height: 25px;
}

@media screen and (max-width: 767px) {
    #myFooter {
        text-align: center;
    }
}


/* CSS used for positioning the footers at the bottom of the page. */
/* You can remove this. */

.content{
   flex: 1 0 auto;
   -webkit-flex: 1 0 auto;
   min-height: 500px;
}

#myFooter{
   flex: 0 0 auto;
   -webkit-flex: 0 0 auto;
}



/* Катрочка товара  */

.cardblock.block {
	background: #d8d8d8;

	width: 1500px;  	/* Ширина Флекс блока*/

	height: 600px;  	/* Высота Флекс блока*/

	margin: 0 auto; /* первый - отступ сверху снизу от блока до родителя, второй по бокам до родителя */

	padding: 10px;  	/* отступ внутри блока от блока к его елементам по всем сторонам*/


}

.cardelement.block__element {
	background: #d8d8d8;

	width: 48%;  		/* Ширина елемента в блоке*/

	height: 580px; 		/* высота елемента в блоке */

	position: relative; /* Положение элемента устанавливается относительно его исходного места */

	margin: 1px; 		/*  Устанавливает величину отступа от каждого края элемента.
						Отступом является пространство от границы текущего элемента
						до внутренней границы его родительского элемента*/

	text-align: center;



}



/*  Flexbox CSS Styling  */

.cardblock.flex-container {  /* свойства контейнера*/


	display: flex;  				/*для того что бы flex заработал для родителя нужно прописать
									обязательно flex, все элементы выстраиваются в дну строку и
									не будут переносится, но можно это отключить свойством nowrap*/

	flex-flow: row wrap; 			/* flex-flow: row nowrap; - значение по умолчанию

									row - в строку на одной линии все flex-елементы, column - колонка
								     row-reverse , column-reverse - соответственно реверс.

								     wrap - перенос, размер согласно .block__element (width: 5%; height: 150px;)
								     nowrap - нету перноса все сжимается
								     wrap-reverse - соответственно */

	justify-content: space-between; 	/*  Выравнивание вдоль горизонтальной оси

										отображенеи елементов, допустим ихи мало:
									   space-around - растянуть на все строку равномерно
									   space-between - растянуть на все строку равномерно, но первый и
									   последний елемент прижат к краю, используется часто
									   flex-start - елементы со стврта согласно своего размера
									   flex-end - с конца согласно размера, если нудно сжимаются
									   center - по центру согласно размера */


	align-items: flex-start;			/*  Выравнивание вдоль вертикальной оси

										stretch - Занимают все высоту родительского елемента
										(колонка снизу доверху), но нужно закоментировать /*height: 150px;
										flex-start - елементы со стврта согласно своего размера
										flex-end - с конца согласно размера, если нудно сжимаются
										center - по центру согласно размера
										baseline - не нужное
										*/

	align-content: stretch;   		/* 	Выравнивание списка елементов вдоль вертикальной оси,
										нужно отключить nowrap, когда много елеменов, и хи нужно
										упорядочмть как строки.

										stretch -
										space-around - растянуть на все строку равномерно
									   	space-between - растянуть на все строку равномерно, но первый и
									   	последний елемент прижат к краю, используется часто
									   	flex-start - елементы со стврта согласно своего размера
									   	flex-end - с конца согласно размера, если нудно сжимаются
									   	center - по центру согласно размера */
}

.cardelement.flex-element {  /* свойства елемента*/

	order: 0;               /* сортировка - с помощью цыфры елементу присваивается номер
					            <div class="block__element flex-element"  style="order: 1">*/

	flex-grow: 0;       /* растягтвание flex елемента, можно один или несколько сделать длинее
							 если 1 то он будет растянут на 50% по строке, все остальные на 50%
							 если 2, то по 25% = 50%, , все остальные на 50, и т.д.% */

	flex-shrink: 1;     /* сужение флех елементв, все узкие один широкий,
						   значения 1 или 0 */

	/*flex-basis: 100px; /* фиксированое растягивание определенного елемента, 240px
						  margin: 1px; , если указать для одного елемента то
						  в контейнере все тянется, а наш елемент фиксированый*/

	/* flex:; 1 0 auto    - можно записать значение преведущих трех елементов */

	align-self: auto;	/* свойства елемента*/
}


.pagecolor {
    background-color: gainsboro
}